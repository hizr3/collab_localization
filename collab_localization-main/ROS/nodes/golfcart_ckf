#!/usr/bin/env python3

import rospy
import math
import numpy as np
import message_filters
import tf
import utm

from geometry_msgs.msg  import Point, Pose2D, Quaternion, Vector3, PoseStamped
from pacmod_msgs.msg    import VehicleSpeedRpt, SystemRptFloat
from nav_msgs.msg       import Odometry, Path
from vn300.msg          import gps, ins, sensors
from decawave_ros.msg   import uwb_distance

np.set_printoptions(linewidth=160)

class golfcart_ckf:

    def __init__(self):

        rospy.init_node('golfcart_ekf')
        # Parameters
        self.L = 3.404
        self.SR = 22.17144334821909

        # Vectornav Subscribers
        self.vn300_imu_sub      = rospy.Subscriber('/vectornav/ins', ins, self.update_ins)

        # Synchronized Pacmod Subscribers
        self.pacmod_speed_sub   = message_filters.Subscriber('/parsed_tx/vehicle_speed_rpt', VehicleSpeedRpt)
        self.pacmod_steer_sub   = message_filters.Subscriber('/parsed_tx/steer_rpt',         SystemRptFloat)
        ts = message_filters.ApproximateTimeSynchronizer([self.pacmod_speed_sub, self.pacmod_steer_sub], 10, 0.03)
        ts.registerCallback(self.update_pacmod)

        # Ultra-Wideband Subscriber
        self.uwb_sub   = rospy.Subscriber('/Decawave', uwb_distance, self.update_uwb)

        # State Publisher
        self.state_pub = rospy.Publisher('golfcart_ckf/state', Odometry, queue_size=10)

        self.br = tf.TransformBroadcaster()

        self.state_odom = Odometry()
        self.state_odom.header.frame_id = 'UTM'
        self.state_odom.child_frame_id  = 'golfcart_state'

        self.time = rospy.rostime.Time()
        self.time_init = False
        self.accel_time = rospy.rostime.Time()
        self.accel_time_init = False

        self.state = np.zeros([6,1])
        
        self.state_init = False
        self.ins_cnt = 10
        self.UTM_0 = np.array([0, 0])

        self.Q = np.zeros([6,6])
        np.fill_diagonal( self.Q, [0.01, 0.01, 0.01, 0.001, 0.001, 0.001] ) # states for IMU is [x,y,theta,vx,vy,omega]

        self.Sigma = self.Q
        self.sigma = np.eye(6)
        
        self.R_ins = np.zeros([5,5])
        np.fill_diagonal( self.R_ins, [0.6, 0.6, 0.08, 0.08, 0.2] )

        self.R_pcm = np.zeros([3,3])
        np.fill_diagonal( self.R_pcm, [0.05, 0.07, 0.01])

        self.anc_offsets = np.array([[ 0.591, 0.165, 1.90], [-0.591, -1.823, 1.90]])
        self.R_uwb = np.array([[0.3]])

        home_utm =utm.from_latlon(30.673794, -96.374043)
        self.UTM_0 = np.array([home_utm[0], home_utm[1]])


    def predict(self, time):
        dt = 1/50
        F = np.identity(6)
        F[0,3] = dt 
        F[1,4] = dt 
        F[2,5] = dt
        
        self.state = np.matmul(F, self.state) 
        self.state[2] = (self.state[2][0] + math.pi) % (2* math.pi) - math.pi # wrap to 2pi
    
        self.Sigma[0:6][0:6] = np.matmul(F, np.matmul(self.Sigma[0:6][0:6], F.T)) + self.Q
        self.sigma[0:6][0:6] = F * self.sigma[0:6][0:6] 


    def update_ins(self, msg):
        self.predict( msg.header.stamp.to_sec() )

        if self.state_init:
            
            pos_utm = utm.from_latlon(msg.LLA.x, msg.LLA.y)

            z = np.array([  [pos_utm[0]], \
                            [pos_utm[1]], \
                            [(msg.RPY.z-90) / 180 * math.pi], \
                            [msg.NedVel.x], \
                            [msg.NedVel.y]])
            
            z[2] = (z[2][0] + math.pi) % (2* math.pi) - math.pi # wrap to 2pi

            np.fill_diagonal( self.R_ins, [msg.PosUncertainty, msg.PosUncertainty, msg.YawUncertainty, msg.VelUncertainty, msg.VelUncertainty] )

            self.H_ins = np.zeros([5,6])
            self.H_ins[0,0] = 1.0
            self.H_ins[1,1] = 1.0
            self.H_ins[2,2] = 1.0
            self.H_ins[3,3] = 1.0
            self.H_ins[4,4] = 1.0

            self.S_ins = np.matmul(self.H_ins, np.matmul(self.Sigma[0:6][0:6], self.H_ins.T)) + self.R_ins 
            self.K_ins = np.matmul(self.Sigma[0:6][0:6], np.matmul(self.H_ins.T, np.linalg.inv(self.S_ins)))
            
            self.state = self.state + np.matmul(self.K_ins, z - self.state[0:5])
            self.state[2] = (self.state[2][0] + math.pi) % (2* math.pi) - math.pi # wrap to 2pi
            
            self.Sigma[0:6][0:6]   = np.matmul((np.eye(6) - np.matmul(self.K_ins, self.H_ins)), self.Sigma[0:6][0:6])
            self.sigma[0:6][0:6] = np.matmul((np.eye(6) - np.matmul(self.K_ins, self.H_ins)), self.sigma[0:6][0:6])

        elif self.ins_cnt > 0:
            pos_utm = utm.from_latlon(msg.LLA.x, msg.LLA.y)

            self.state[0] = pos_utm[0]
            self.state[1] = pos_utm[1]
            self.state[2] = (90-msg.RPY.z) / 180 * math.pi + 0.05
            self.state_init = True
            self.ins_cnt = self.ins_cnt - 1


    def update_pacmod(self, speed_msg, steer_msg):
        
        z = np.array([  [speed_msg.vehicle_speed * math.cos(self.state[2])] , \
                        [speed_msg.vehicle_speed * math.sin(self.state[2])] , \
                        [speed_msg.vehicle_speed / self.L * math.tan(steer_msg.output / self.SR) ] ])

        self.H_pcm = np.zeros([3,6])
        self.H_pcm[0,3] = 1.0
        self.H_pcm[1,4] = 1.0
        self.H_pcm[2,5] = 1.0

        self.S_pcm = np.matmul(self.H_pcm, np.matmul(self.Sigma[0:6][0:6], self.H_pcm.T)) + self.R_pcm 
        self.K_pcm = np.matmul(self.Sigma[0:6][0:6], np.matmul(self.H_pcm.T, np.linalg.inv(self.S_pcm)))
        
        self.state = self.state + np.matmul(self.K_pcm, z - self.state[0:5])
        self.state[2] = (self.state[2][0] + math.pi) % (2* math.pi) - math.pi # wrap to 2pi
        
        self.Sigma[0:6][0:6] = np.matmul((np.eye(6) - np.matmul(self.K_pcm, self.H_pcm)), self.Sigma[0:6][0:6])
        self.sigma[0:6][0:6] = np.matmul((np.eye(6) - np.matmul(self.K_pcm, self.H_pcm)), self.sigma[0:6][0:6])
        

    def update_uwb(self, msg):
        run = rospy.get_param("/run")
        if run <= 8 or run > 15:
            if run <= 8:
                # Cross
                tags = ( (751591.54, 3396403.54, 1.27), (751572.08, 3396386.66, 1.27))
            else:
                # Tunnel
                tags = ( (751574.23, 3396401.47, 1.27), (751574.23, 3396356.33, 1.27))
            
            R = np.array([[ math.cos(self.state[2]), -math.sin(self.state[2])],
                          [ math.sin(self.state[2]),  math.cos(self.state[2])]])

            off = np.matmul(R, self.anc_offsets[msg.anc][0:2])
            X = off[0] + self.state[0]
            Y = off[1] + self.state[1]
            Z = self.anc_offsets[msg.anc][2]
            
            h = np.array([[math.sqrt(   (X - tags[msg.tag][0])**2 + \
                                        (Y - tags[msg.tag][1])**2 + \
                                        (Z - tags[msg.tag][2])**2 )]])

            z = msg.dist

            self.H_uwb = np.zeros([1,6])
            
            self.H_uwb[0,0] = (X - tags[msg.tag][0]) / math.sqrt(z)
            self.H_uwb[0,1] = (Y - tags[msg.tag][1]) / math.sqrt(z)
            self.H_uwb[0,2] = -1 / math.sqrt(z) * \
                ((X-tags[msg.tag][0])*( self.anc_offsets[0][msg.anc]*math.sin(self.state[2]) + self.anc_offsets[1][msg.anc]*math.cos(self.state[2])) + \
                (Y-tags[msg.tag][1])*(-self.anc_offsets[0][msg.anc]*math.cos(self.state[2]) + self.anc_offsets[1][msg.anc]*math.sin(self.state[2])) )

            
            self.S_uwb = np.matmul(self.H_uwb, np.matmul(self.Sigma[0:6][0:6], self.H_uwb.T)) + self.R_uwb 
            self.K_uwb = np.matmul(self.Sigma[0:6][0:6], np.matmul(self.H_uwb.T, np.linalg.inv(self.S_uwb)))
            
            self.state = self.state + np.matmul(self.K_uwb, z - self.state[0:5])
            self.state[2] = (self.state[2][0] + math.pi) % (2* math.pi) - math.pi # wrap to 2pi
            
            self.Sigma[0:6][0:6] = np.matmul((np.eye(6) - np.matmul(self.K_uwb, self.H_uwb)), self.Sigma[0:6][0:6])
            self.sigma[0:6][0:6] = np.matmul((np.eye(6) - np.matmul(self.K_uwb, self.H_uwb)), self.sigma[0:6][0:6])

        else:
            # Parallel
            tags = ( (751574.23, 3396401.47, 1.27), (751574.53, 3396405.02, 1.27))

            R = np.array([[ math.cos(self.state[2]), -math.sin(self.state[2])],
                          [ math.sin(self.state[2]),  math.cos(self.state[2])]])

            off = np.matmul(R, self.anc_offsets[msg.anc][0:2])
            X = off[0] + self.state[0]
            Y = off[1] + self.state[1]
            Z = self.anc_offsets[msg.anc][2]
            
            h = np.array([[math.sqrt(   (X - tags[msg.tag][0])**2 + \
                                        (Y - tags[msg.tag][1])**2 + \
                                        (Z - tags[msg.tag][2])**2 )]])

            z = msg.dist

            self.H_uwb = np.zeros([1,12])
            
            self.H_uwb[0,0] = (X - tags[msg.tag][0]) / math.sqrt(z)
            self.H_uwb[0,1] = (Y - tags[msg.tag][1]) / math.sqrt(z)
            self.H_uwb[0,2] = -1 / math.sqrt(z) * \
                ((X-tags[msg.tag][0])*( self.anc_offsets[0][msg.anc]*math.sin(self.state[2]) + self.anc_offsets[1][msg.anc]*math.cos(self.state[2])) + \
                (Y-tags[msg.tag][1])*(-self.anc_offsets[0][msg.anc]*math.cos(self.state[2]) + self.anc_offsets[1][msg.anc]*math.sin(self.state[2])) )
            
            self.H_uwb[0,6] = -(X - tags[msg.tag][0]) / math.sqrt(z)
            self.H_uwb[0,7] = -(Y - tags[msg.tag][1]) / math.sqrt(z)
            self.H_uwb[0,8] = 1 / math.sqrt(z) * \
                ((X-tags[msg.tag][0])*( self.anc_offsets[0][msg.anc]*math.sin(math.pi/2) + self.anc_offsets[1][msg.anc]*math.cos(math.pi/2)) + \
                 (Y-tags[msg.tag][1])*(-self.anc_offsets[0][msg.anc]*math.cos(math.pi/2) + self.anc_offsets[1][msg.anc]*math.sin(math.pi/2)) )
            
            Sigma_ii = self.Sigma[0:6][0:6]
            sigma_ij = self.sigma[0:6][0:6]
            
            Sigma_jj = self.Sigma[0:6][0:6]
            sigma_ji = np.eye(6)

            Sigma_ij = np.matmul(sigma_ij, sigma_ji.T)
            Sigma_1a = np.concatenate((Sigma_ii,   Sigma_ij), axis=1)
            Sigma_2a = np.concatenate((Sigma_ij.T, Sigma_jj), axis=1)
            Sigma_aa = np.concatenate((Sigma_1a,   Sigma_2a), axis=0)

            self.S_uwb = np.matmul(self.H_uwb, np.matmul(Sigma_aa, self.H_uwb.T)) + self.R_uwb 
            self.K_uwb = np.matmul(Sigma_aa, np.matmul(self.H_uwb.T, np.linalg.inv(self.S_uwb)))
            
            x_del = np.matmul(K, z - f)
            self.state = self.state + x_del[0:6]
                        
            Sigma_t = np.matmul((np.eye(6) - np.matmul(self.K_uwb, self.H_uwb)), Sigma_aa)
                        
            self.ckf_Sigma[0:6][0:6] = Sigma_t[0:6][0:6]
            self.ckf_sigma[0:6][0:6] = Sigma_t[0:6][0:6]


    def run(self):
        rate = rospy.Rate(100) # 100 Hz
        while(not rospy.is_shutdown()):
            if self.state_init: 

                quat = tf.transformations.quaternion_from_euler(0,0,-self.state[2])
                self.state_odom.header.stamp = rospy.Time.now()
                self.state_odom.pose.pose.position = Point(self.state[0],self.state[1],0)
                self.state_odom.pose.pose.orientation = Quaternion(quat[0], quat[1], quat[2], -quat[3])
                self.state_odom.pose.covariance = self.ckf_Sigma[0:6,0:6].flatten()
                
                self.state_odom.twist.twist.linear = Vector3(self.state[3],self.state[4],0)
                self.state_odom.twist.twist.angular = Vector3(0,0,self.state[5])
                self.state_odom.twist.covariance = self.ckf_Sigma[0:6,0:6].flatten()

                self.state_pub.publish( self.state_odom )

                
                self.br.sendTransform( ( self.state[0], self.state[1], 0.0),
                    (0.0, 0.0, 0.0, 1.0), #(quat[0], quat[1], quat[2], quat[3]),
                    rospy.Time.now(),
                    'golfcart_state',
                    'UTM')
                

                self.br.sendTransform(  (self.UTM_0[0], self.UTM_0[1], 0.0),
                    (0.0, 0.0, 0.0, 1.0),
                    rospy.Time.now(),
                    'local',
                    'UTM')
            
            rate.sleep()



if __name__ == '__main__':
    golfcart_ckf = golfcart_ckf()
    golfcart_ckf.run()