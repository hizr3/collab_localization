if t == 1
    EKF_x = zeros(6, nCars, nSims, nTicks);
    EKF_P = zeros(6, 6, nCars, nSims, nTicks);
    
    EKF_x(1:3,:,:,t) = repmat(x_truth(1:3,:,t), [1,1,nSims]);
    EKF_P(:,:,:,:,t) = repmat(... 
            diag([  imu_acc_err / 2 / rate_imu^2    ;...
                    imu_acc_err / 2 / rate_imu^2    ;...
                    imu_gyr_err / rate_imu        ;...
                    imu_acc_err / rate_imu        ;...
                    imu_acc_err / rate_imu        ;...
                    imu_gyr_err]), [1,1,nCars,nSims]);
                
else
    
    % Predict Step at 400 Hz
    if mod(t, rate/rate_imu) == 0
        
        accel = [acc(t,:); x_truth(4,:,t).^2 / wb.* tan(del(t,:))] ...
            + normrnd(0, imu_acc_err, [2, nCars, nSims]);
        
        gyro = x_truth(4,:,t) .* tan(del(t,:)) / wb ...
            + normrnd(0, imu_gyr_err, [1, nCars, nSims]);
        
        mag = x_truth(2,:,t) ...
            + normrnd(0, imu_mag_err, [1, nCars, nSims]);
        
        theta = EKF_x(3,:,:,t);

        accel_r = [-sin(theta) .* accel(1,:,:) - cos(theta).*accel(2,:,:)  ;...
                    cos(theta) .* accel(1,:,:) - sin(theta).*accel(2,:,:)];

        EKF_x(:,:,:,t) = [...
            EKF_x(1,:,:,t-1) + EKF_x(4,:,:,t-1) * (dt*3) + accel_r(1,:,:) / 2 * (dt*3)^2; ...
            EKF_x(2,:,:,t-1) + EKF_x(5,:,:,t-1) * (dt*3) + accel_r(2,:,:) / 2 * (dt*3)^2; ...
           (EKF_x(3,:,:,t-1) + gyro(3)  * dt) * 0.98 + 0.02 * mag;...
            EKF_x(4,:,:,t-1) + accel_r(1) * dt;...
            EKF_x(5,:,:,t-1) + accel_r(2) * dt;...
            gyro];


        Q = diag([  imu_acc_err / 2 / rate_imu^2    ;...
                    imu_acc_err / 2 / rate_imu^2    ;...
                    imu_gyr_err / rate_imu        ;...
                    imu_acc_err / rate_imu        ;...
                    imu_acc_err / rate_imu        ;...
                    imu_gyr_err]);

        F = [   1, 0, 0, (dt*3), 0, 0;...
                0, 1, 0, 0, (dt*3), 0;...
                0, 0, 1, 0, 0, (dt*3);...
                0, 0, 0, 1, 0, 0;...
                0, 0, 0, 0, 1, 0;...
                0, 0, 0, 0, 0, 1];
        
        EKF_P(:,:,:,:,t) = pagemtimes(pagemtimes(F, EKF_P(:,:,:,:,t-1)), F) + Q;
        
    end

    % Pacmod Step at 30 Hz
    if mod(t, rate/rate_mdl) == 0

    end

    % GPS step at 10 Hz
    if mod(t, rate/rate_gps) == 0

    end

    % UWB step at 3 Hz
    if mod(t, rate/rate_uwb) == 0

    end
end


% function [obj] = predict(obj)
%     dt = 1/obj.rate_imu;
%     [accel, gyro, mag] = obj.sense_imu();
%     
%     theta = obj.ekf_x(3);
%     
%     R = [   cos(theta + pi/2), -sin(theta + pi/2),  0;...
%             sin(theta + pi/2),  cos(theta + pi/2),  0;...
%             0,                  0,                  1];
% 
%     accel_r = R * accel';
% 
%     obj.ekf_x = [...
%                 obj.ekf_x(1) + obj.ekf_x(4) * dt + accel_r(1) / 2 * dt^2;...
%                 obj.ekf_x(2) + obj.ekf_x(5) * dt + accel_r(2) / 2 * dt^2;...
%                (obj.ekf_x(3) + gyro(3)  * dt) * 0.98 + 0.02 * mag(3);...
%                 obj.ekf_x(4) + accel_r(1) * dt;...
%                 obj.ekf_x(5) + accel_r(2) * dt;...
%                 gyro(3)];
% 
%     Q = diag([  obj.imu_acc_err/2/obj.rate_imu^2    ;...
%                 obj.imu_acc_err/2/obj.rate_imu^2    ;...
%                 obj.imu_gyr_err/obj.rate_imu        ;...
%                 obj.imu_acc_err/obj.rate_imu        ;...
%                 obj.imu_acc_err/obj.rate_imu        ;...
%                 obj.imu_gyr_err]);
% 
%     F = [   1, 0, 0, dt, 0, 0;...
%             0, 1, 0, 0, dt, 0;...
%             0, 0, 1, 0, 0, dt;...
%             0, 0, 0, 1, 0, 0;...
%             0, 0, 0, 0, 1, 0;...
%             0, 0, 0, 0, 0, 1];
% 
%     obj.ekf_cov = F * obj.ekf_cov * F' + Q;
% 
% end
% function [obj] = update_mdl(obj)
% 
%     [ vel, delta ] = obj.sense_model();
% 
%     z = [   vel;...
%             vel*tan(delta)/obj.wb ];
%     
%     kf_vel = sqrt( obj.ekf_x(4)^2 + obj.ekf_x(5)^2 );
%     
%     H = [   0, 0, 0, obj.ekf_x(4) / kf_vel, obj.ekf_x(5) / kf_vel, 0;...
%             0, 0, 0, 0, 0, 1];
% 
%     h = [kf_vel; obj.ekf_x(6)];
%         
%     r2 = diag([ obj.enc_err;...
%                 obj.str_err * vel / obj.wb]);
% 
%     K = obj.ekf_cov * H' / (H * obj.ekf_cov * H' + r2);
% 
%     obj.ekf_x   = obj.ekf_x + K*(z - h);
%     obj.ekf_cov = (eye(6) - K*H) * obj.ekf_cov;
%     
% end
% function [obj] = update_gps(obj)
%     
%     [ x, y, theta, vel ] = sense_gps(obj); 
%     
%     z = [   x;...
%             y;...
%             theta;...
%             vel];
% 
%     kf_vel = sqrt( obj.ekf_x(4)^2 + obj.ekf_x(5)^2 );
%     
%     H = [   1, 0, 0, 0, 0, 0;...
%             0, 1, 0, 0, 0, 0;...
%             0, 0, 1, 0, 0, 0;...
%             0, 0, 0, obj.ekf_x(4) / kf_vel, obj.ekf_x(5) / kf_vel, 0];
%     
%     h = [   obj.ekf_x(1:3);...
%             kf_vel];
%         
%     R = diag([  obj.gps_cep;...
%                 obj.gps_cep;...
%                 obj.gps_her;...
%                 obj.gps_ver]);
% 
%     K = obj.ekf_cov * H' / (H * obj.ekf_cov * H' + R);
% 
%     obj.ekf_x = obj.ekf_x + K*(z - h);
%     obj.ekf_cov = (eye(6) - K*H)*obj.ekf_cov;
%     
% end
